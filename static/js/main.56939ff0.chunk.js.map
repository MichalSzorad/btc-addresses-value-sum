{"version":3,"sources":["api.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["_callee","address","response","text","regenerator_default","a","wrap","_context","prev","next","fetch","sent","abrupt","parseInt","stop","addresses","window","location","hash","split","filter","Boolean","SATOSHI_PER_BTC","satoshiToBtc","satoshiValue","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","result","setResult","useEffect","Promise","all","map","_x","_fetchBitcoinAddressValue","apply","this","arguments","fetchBitcoinAddressValue","then","addressValues","catch","e","alert","join","console","error","react_default","createElement","className","style","fontSize","reduce","b","textAlign","fontFamily","i","key","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQAAO,SAAAA,EAAwCC,GAAxC,IAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACkBC,MAAM,4CAA8CT,GADtE,cACCC,EADDK,EAAAI,KAAAJ,EAAAE,KAAA,EAEcP,EAASC,OAFvB,cAECA,EAFDI,EAAAI,KAAAJ,EAAAK,OAAA,SAGEC,SAASV,EAAM,KAHjB,wBAAAI,EAAAO,SAAAd,6BCIP,IAAMe,GAAaC,OAAOC,SAASC,KAAKC,MAAM,KAAK,IAAM,IAAIA,MAAM,KAAKC,OAAOC,SACzEC,EAAkB,IAMxB,SAASC,EAAaC,GACpB,OAAOA,EAAeF,EAiCTG,MA9Bf,WAAe,IAAAC,EACeC,IAAMC,SAA0B,MAD/CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNM,EADMH,EAAA,GACEI,EADFJ,EAAA,GAcb,OAXAF,IAAMO,UAAU,WACdC,QAAQC,IAAIrB,EAAUsB,IAAI,SAAApC,GAAO,ODnB9B,SAAPqC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,WCmByCC,CAAyB1C,MAC3D2C,KAAK,SAACC,GACLZ,EAAUY,KACTC,MAAM,SAAAC,GACPC,MAAM,+CAAiDjC,EAAUkC,KAAK,OACtEC,QAAQC,MAAMJ,MAEjB,IAIDK,EAAA/C,EAAAgD,cAAA,OAAKC,UAAU,OACbF,EAAA/C,EAAAgD,cAAA,UAAQC,UAAU,cAChBF,EAAA/C,EAAAgD,cAAA,wBACAD,EAAA/C,EAAAgD,cAAA,QAAME,MAAO,CAAEC,SAAU,QACtBxB,GAAUT,EAAwBS,EA1B/ByB,OAAO,SAACpD,EAAGqD,GAAJ,OAAUrD,EAAIqD,GAAG,IAyB9B,UAGAN,EAAA/C,EAAAgD,cAAA,WACAD,EAAA/C,EAAAgD,cAAA,OAAKE,MAAO,CAAEI,UAAW,OAAQC,WAAY,cAC1C5B,GAAUjB,EAAUsB,IAAI,SAACpC,EAAS4D,GAAV,OAAgBT,EAAA/C,EAAAgD,cAAA,OAAKS,IAAK7D,GAAUA,EAApB,MAAgCsB,EAAaS,EAAO6B,IAApD,gBC1B/BxC,QACW,cAA7BL,OAAOC,SAAS8C,UAEe,UAA7B/C,OAAOC,SAAS8C,UAEhB/C,OAAOC,SAAS8C,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAA/C,EAAAgD,cAACc,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.56939ff0.chunk.js","sourcesContent":["export async function fetchBitcoinAddressValue(address: string): Promise<number> {\r\n  const response = await fetch('https://blockchain.info/q/addressbalance/' + address);\r\n  const text = await response.text();\r\n  return parseInt(text, 10)\r\n}","import React from 'react';\nimport './App.css';\nimport { fetchBitcoinAddressValue } from './api';\n\nconst addresses = (window.location.hash.split('#')[1] || '').split(',').filter(Boolean);\nconst SATOSHI_PER_BTC = 100 * 1000 * 1000;\n\nfunction sumNumbers(nums: number[]): number {\n  return nums.reduce((a, b) => a + b, 0);\n}\n\nfunction satoshiToBtc(satoshiValue: number): number {\n  return satoshiValue / SATOSHI_PER_BTC;\n}\n\nfunction App() {\n  const [result, setResult] = React.useState<number[] | null>(null);\n\n  React.useEffect(() => {\n    Promise.all(addresses.map(address => fetchBitcoinAddressValue(address)))\n      .then((addressValues) => {\n        setResult(addressValues);\n      }).catch(e => {\n        alert('Could not fetch values for those addresses: ' + addresses.join(', '));\n        console.error(e);\n      })\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span>YOU HAVE</span>\n        <code style={{ fontSize: '2em' }}>\n          {result && satoshiToBtc(sumNumbers(result))}Ƀ\n        </code>\n        <br />\n        <div style={{ textAlign: 'left', fontFamily: 'monospace' }}>\n          {result && addresses.map((address, i) => <div key={address}>{address} : {satoshiToBtc(result[i])}Ƀ</div>)}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}